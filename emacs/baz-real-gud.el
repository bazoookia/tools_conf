(require 'seq)
(defun my-gud-refresh ()
  (interactive)
  (delete-other-windows)
  (switch-to-buffer "*Messages*")
  ;; (realgud-goto-arrow1)
  (switch-to-buffer (car (seq-filter (apply-partially #'string-match-p "gdb") (mapcar #'buffer-name (buffer-list)))))
  (split-window-below)
  (other-window -1)
  (my-gud-src)
  (other-window -1))

(defun my-gud-src ()
  (interactive)
  (switch-to-buffer (realgud-get-srcbuf-from-cmdbuf (current-buffer))))

(defun my-gud-break ()
  (interactive)
  (realgud:attach-cmd-buffer (car (seq-filter (apply-partially #'string-match-p "gdb") (mapcar #'buffer-name (buffer-list)))))
  (realgud:cmd-break))

(defun my-gud-tbreak ()
  (interactive)
  (realgud:attach-cmd-buffer (car (seq-filter (apply-partially #'string-match-p "gdb") (mapcar #'buffer-name (buffer-list)))))
  (realgud:cmd-tbreak))

(defun my-gud-print ()
  (interactive)
  (beginning-of-thing 'symbol)
  (set-mark-command 'nil)
  (end-of-thing 'symbol)
  (realgud:cmd-run-command (thing-at-point 'symbol) "eval"))

(global-set-key [double-down-mouse-1] 'my-gud-print)
(global-set-key (kbd "C-c r") 'my-gud-refresh)
(global-set-key (kbd "C-c b") 'my-gud-break)
(global-set-key (kbd "C-c t") 'my-gud-tbreak)
(global-set-key (kbd "C-c C-c") 'comint-interrupt-subjob)

(defconst realgud:gdb-complete-script "complete %s")
(defun my-gud-prompt ()
  (interactive)
  (when (get-buffer "my-gud-prompt")
    (let (cur (current-buffer))
         (switch-to-buffer "my-gud-prompt")
         (erase-buffer)
         (switch-to-buffer cur)))
  (let ((start-pos (save-excursion (comint-goto-process-mark) (point)))
        (end-pos (point))
       )
       (comint-redirect-send-command (format realgud:gdb-complete-script (buffer-substring-no-properties start-pos end-pos)) "my-gud-prompt" nil nil)
  )
)

(defun my-gud-list-history ()
  (interactive)
  (let* ((cur (current-buffer))
        )
        (when (get-buffer "my-gud-history")
          (switch-to-buffer "my-gud-history")
          (erase-buffer)
          (switch-to-buffer cur))
        (comint-redirect-send-command "show commands" "my-gud-history" nil nil)
        (with-current-buffer (process-buffer (get-buffer-process (current-buffer)))
          (while (null comint-redirect-completed)
            (accept-process-output nil 0 5)))
        (switch-to-buffer "my-gud-history")
        (message "out: %d" (goto-char (point-max)))
        (switch-to-buffer cur)
  ))

(defun switch-to-buffer-and-print-line(b)
  (switch-to-buffer b)
  (when (> (point) (buffer-size))
    (beginning-of-buffer))
  (end-of-line)
  (let* ((prop-start-pos (save-excursion (beginning-of-line) (point)))
         (prop-end-pos (point))
        )
        (next-line)
        (buffer-substring-no-properties prop-start-pos prop-end-pos)
  ))

(defun switch-to-buffer-and-print-pre-line(b)
  (switch-to-buffer b)
  (beginning-of-line)
  (when (> (point) 1)
    (previous-line))
  (beginning-of-line)
  (when (> (point) 1)
    (previous-line))
  (end-of-line)
  (let* ((prop-start-pos (save-excursion (beginning-of-line) (point)))
         (prop-end-pos (point))
        )
        (next-line)
        (buffer-substring-no-properties prop-start-pos prop-end-pos)
  ))

(defun my-gud-complete ()
  (interactive)
  (let* ((cur (current-buffer))
         (cmd-start-pos (save-excursion (comint-goto-process-mark) (point)))
         (cmd-end-pos (point))
         (output-string (switch-to-buffer-and-print-line "my-gud-prompt"))
        )
        (switch-to-buffer cur)
        (when (> (length output-string) 0)
          (delete-region cmd-start-pos cmd-end-pos)
          (insert output-string))
   ))

(defun my-gud-complete-pre ()
  (interactive)
  (let* ((cur (current-buffer))
         (cmd-start-pos (save-excursion (comint-goto-process-mark) (point)))
         (cmd-end-pos (point))
         (output-string (switch-to-buffer-and-print-pre-line "my-gud-prompt"))
        )
        (switch-to-buffer cur)
        (when (> (length output-string) 0)
          (delete-region cmd-start-pos cmd-end-pos)
          (insert output-string))
   ))

(defun my-gud-history ()
  (interactive)
  (let* ((cur (current-buffer))
         (cmd-start-pos (save-excursion (comint-goto-process-mark) (point)))
         (cmd-end-pos (point))
        )
        (let* ((output-string (switch-to-buffer-and-print-pre-line "my-gud-history"))
              )
              (switch-to-buffer cur)
              (delete-region cmd-start-pos cmd-end-pos)
              (insert (substring output-string 7))
        )
  ))


(global-set-key (kbd "M-c") 'my-gud-prompt)
(global-set-key (kbd "M-h") 'my-gud-list-history)
(global-set-key (kbd "M-n") 'my-gud-complete)
(global-set-key (kbd "M-p") 'my-gud-complete-pre)
(global-set-key (kbd "M-u") 'my-gud-history)
